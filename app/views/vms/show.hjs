<!DOCTYPE html>
<html>
  <head>
    <title>{{vm.name}} - VM</title>
    <link rel='stylesheet' href='/bower_components/bootstrap/dist/css/bootstrap.css' />
    <link rel='stylesheet' href='/css/style.css' />
  </head>
  <body>
    <div class="navbar navbar-default navbar-static-top" role="navigation">
      <div class="container">
        <div class="navbar-header">
          <a class="navbar-brand" href="/">VMChat</a>
        </div>
        <ul class="nav navbar-nav">
          <li class="vote">
            <!-- http://blog.nodeknockout.com/post/35364532732/protip-add-the-vote-ko-badge-to-your-app -->
            <iframe src="http://nodeknockout.com/iframe/nkzawa" frameborder=0 scrolling=no allowtransparency=true width=115 height=25></iframe>
          </li>
        </ul>
        <ul class="nav navbar-nav navbar-right">
        {{#user}}
          <li><a href="#">Hello, {{user.username}}</a></li>
          <li><a href="/logout">Logout</a></li>
        {{/user}}
        {{^user}}
          <li><a href="/login">Login</a></li>
        {{/user}}
        </ul>
      </div>
    </div>

    <div class="container">
      <h1 class="vm-show">
        <span class="owner">{{vm._creator.username}}</span> / <span class="name">{{vm.name}}</span>
      </h1>
      <div class="row">
        <div class="col-xs-9">
          <div class="terminal"></div>
          <div class="row">
            <div class="col-xs-2"></div>
            <input class="col-xs-10 command-input" type="text" name="command" autofocus/>
          </div>
        </div>
        <div class="col-xs-3">
          <div class="list-group users">
          {{#vm.users}}
            <a class="list-group-item user">
              <img src="{{avatarUrl}}" alt="{{username}}"/>{{username}}
            </a>
          {{/vm.users}}
          </div>
        </div>
      </div>
    </div>

    <div class="templates" style="display:none;">
      <script type="text/plain" class="output">
        <div class="row">
          <div class="col-xs-1">
            <img class="avatar" src="{%user.avatarUrl%}" alt="{%user.username%}"/>
          </div>
          <div class="col-xs-11">
            <h4>{%user.username%}</h4>
            <pre class="output">{%data%}</pre>
          </div>
        </div>
      </script>
    </div>

    <script src="/signal.io/socket.io.js"></script>
    <script src="/bower_components/jquery/jquery.js"></script>
    <script src="/bower_components/bootstrap/dist/js/bootstrap.js"></script>
    <script src="/bower_components/hogan/web/builds/2.0.0/hogan-2.0.0.js"></script>
    <script type="text/javascript">
      var socket = io('/vms/{{vm._id}}/shell', {path: '/signal.io'});
      var hoganOption = {delimiters: '{% %}'};

      socket.on('connect', function() {
        var $terminal = $('.terminal');
        var $templates = $('.templates');
        var outputTemplate = Hogan.compile($templates.find('.output').text(), hoganOption);
        var input = new Input();
        var lastUser = null;
        var $lastOutput = null;

        function scrollableHeight() {
          return $terminal[0].scrollHeight - $terminal.height();
        }

        socket.on('output', function(data) {
          var mustScroll = $terminal.scrollTop() + 50 > scrollableHeight();

          if (!lastUser || lastUser._id !== data.user._id) {
            lastUser = data.user;
            $lastOutput = $(outputTemplate.render(data));
            $terminal.append($lastOutput);
          } else {
            var $output = $lastOutput.find('.output');
            $output.text($output.text() + data.data);
          }

          if (mustScroll) {
            $terminal.scrollTop(scrollableHeight() + 1);
          }
        });

        input.$input.keyup(function(e) {
          if (e.which !== 13) return;

          var command = input.value();
          socket.emit('write', command);
          input.clear();
        });
      });

      function Input() {
        this.$input = $('.command-input');

        var self = this;
        this._focusId = setInterval(function() {
          // always focus to input
          self.$input.focus();
        }, 500);
      }

      Input.prototype.value = function() {
        return this.$input.val();
      };

      Input.prototype.clear = function() {
        this.$input.val('');
      };
    </script>
  </body>
</html>
